#+title: Cliente de red
#+setupfile: setup.org

* El juego de verdad
:PROPERTIES:
:CUSTOM_ID: el-juego-de-verdad
:END:

#+REVEAL: split

El cliente estará en una página (un archivo =.html=), como siempre

#+REVEAL: split

Iniciamos una página HTML normal:

#+begin_src html
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Cliente del juego</title>
</head>
<body>
#+end_src

#+REVEAL: split

El servidor que hemos creado no sólo nos sirve la página web, sino
también la librería

Esto nos asegura no tener diferentes versiones entre cliente y servidor

#+REVEAL: split

Añadimos esta línea a nuestro =<body>=

#+begin_src html
<script src="/socket.io/socket.io.js"></script>
#+end_src

La ruta la crea automáticamente el servidor con =socket.io=, no hay que
tener el archivo

#+REVEAL: split

Creamos dos botones y un párrafo para la interfaz, y cogemos sus
referencias para manejarlos desde JavaScript:

#+begin_src html
<button id="armas">Pedir precios de armas</button>
<button id="comida">Pedir precios de comida</button>

<p id="lista"></p>

<script>
  const armas = document.getElementById("armas");
  const comida = document.getElementById("comida");
  const muestra = document.getElementById("lista");
</script>
#+end_src

#+REVEAL: split

Iniciamos la conexión con la dirección y el puerto (que tiene que ser el
mismo que el del servidor)

#+begin_src html
<script>
  const direccion = 'localhost';
  const puerto = 3000;
  const socket = io('http://' + direccion + ':' + puerto);
</script>
#+end_src

#+REVEAL: split

Es más cómodo definir el puerto /sólo en 1 sitio/ (en vez de poner
=const port=3000= en cliente y servidor), e importar el módulo

#+REVEAL: split

Cada botón va a enviar un mensaje del mismo tipo (='precios'=), con un
objeto adicional particular:

#+begin_src html
<script>
  armas.onclick = () => socket.emit('precios', 'armas');
  comida.onclick = () => socket.emit('precios', 'comida');
</script>
#+end_src

#+REVEAL: split

Cuando llegue la lista, la mostramos en el párrafo =muestra=:

#+begin_src html
  <script>
    socket.on('respuesta', lista => {
      // `JSON.stringify` convierte un JSON a string para
      // poder mostrarlo
      muestra.innerHTML = JSON.stringify(lista)
    });
  </script>
 </body>
</html>
#+end_src
