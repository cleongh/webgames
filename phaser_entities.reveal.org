#+title: Entidades en Phaser
#+setupfile: setup.org

* =GameObject=
:PROPERTIES:
:CUSTOM_ID: gameobject
:END:

#+REVEAL: split

[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.GameObject][=GameObject=]]
es la entidad básica de Phaser.

#+REVEAL: split

Tienen una referencia a la escena a la que pertenece (=scene=)

Tienen un método para activar/desactivar los gameobject
(=setActive(value)=)

Tienen métodos para suscribirnos (=on()=) y desengancharnos de eventos
(=off()=)

Pueden convertirse en objetos interactuables (=setInteractive(value)=)

(... y otros muchos métodos)

#+REVEAL: split

No crearemos objetos de este tipo pero muchas de las entidades de Phaser
heredan de
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.GameObject][=GameObject=]]

A continuación veremos algunas de las entidades más importantes de
Phaser

* Entidades [[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Image][=Image=]]
:PROPERTIES:
:CUSTOM_ID: entidades-image
:END:

#+REVEAL: split

Las imágenes son las entidades visibles más simples de Phaser. Las
entidades son instancias de la clase
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Image][=Image=]]

#+REVEAL: split

Su simplicidad las hace ligeras y eficientes en términos de memoria

Utilizamos imágenes cuando no necesitamos comportamientos complejos como
físicas o animaciones por /keyframes/

#+REVEAL: split

Aun así, las imágenes se pueden mover, rotar, escalar, invertir (/flip/)
o recortar

Esto las hace ideales para, por ejemplo, logos, imágenes de fondo,
barras de carga, elementos de interfaz...

#+REVEAL: split

Una imagen se crea a través del método factoría
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.GameObjectFactory][=add.image=]]
del objeto =Scene=

Por ejemplo, como parte de la creación de una escena en el método
=create=



** Atributos relevantes de las imágenes
:PROPERTIES:
:CUSTOM_ID: atributos-relevantes-de-las-imágenes
:END:

#+REVEAL: split

En Phaser, el origen de coordenadas (0,0) está en la esquina superior
izquierda

Las imágenes tienen por defecto el punto de origen (o pivote) en el
centro de la imagen

# #+REVEAL: split

# #+caption: Sistema de coordenadas en Phaser
# [[./phaser_coordinates.png]]

#+REVEAL: split

Las imágenes renderizan texturas de acuerdo a su posición (x,y) y
pivote.

Podemos cambiar su posición con
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Image#setPosition][=setPosition=]]

Podemos cambiar el pivote de la imagen con
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Image#setOrigin][=setOrigin=]]
(en [0,1])

#+REVEAL: split

También se puede elegir el /blending/ con =blendMode=

Se puede cambiar su transparencia con =alpha=

Se puede cambiar su profundidad o /z-index/ con =depth=

(¡mirad el API!)

** Métodos relevantes de las imágenes
:PROPERTIES:
:CUSTOM_ID: métodos-relevantes-de-las-imágenes
:END:

#+REVEAL: split

Una imagen puede ser "recortada" con =setCrop=, de forma que sólo se vea
un trozo de la misma

#+begin_src js
// this es una Scene
this.image = this.add.image(0, 0, 'phaser');
this.image.setCrop(0, 0, 10, 10);
#+end_src

#+REVEAL: split

Cuando la imagen se recorta, realmente no se pierde información

De hecho, el recorte se puede cambiar dinámicamente:

#+begin_src js
// this es una Scene
function update() {
    this.v += 0.1;
    this.image.setCrop(0, 0, this.v, this.v);
}
#+end_src

#+REVEAL: split

- Podemos invertir las imágenes con los métodos =setFlip=, =setFlipX=,
  =Set FlipY=
- Podemos cambiar el orden de dibujado con =setDepth=
- ...

(Nuevamente, mirad la API)

* La escena ([[https://newdocs.phaser.io/docs/3.55.2/Phaser.Scene][=Scene=]])
:PROPERTIES:
:CUSTOM_ID: la-escena-scene
:END:

#+REVEAL: split

Podemos crear nuestras propias escenas heredando de la clase
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Scene][=Scene=]]:

#+begin_src js
export default class Menu extends Phaser.Scene {

  constructor() {
    // Nombre de la escena para el SceneManager
    super({ key: 'menu-principal' }); 
  }

  // Métodos init, preload, create, update

}  
#+end_src



** Añadir entidades a la escena
:PROPERTIES:
:CUSTOM_ID: añadir-entidades-a-la-escena
:END:
En Phaser, la factoría de objetos se llama añadir (=add=) por una razón:
*porque añadimos las nuevas entidades a la escena*

Para Phaser, la escena, representado por la clase
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Scene][=Scene=]], es la
*abstracción del lugar (un plano bidimensional) donde habitan las
entidades*



** Cámara
:PROPERTIES:
:CUSTOM_ID: cámara
:END:
#+attr_html: :height 400
#+caption: La escena, la cámara y entidades más allá de los límites de la cámara
[[file:world.svg]]

#+REVEAL: split

Miramos al mundo a través de [[https://newdocs.phaser.io/docs/3.55.2/Phaser.Cameras.Scene2D.Camera][cámaras]]

#+REVEAL: split

#+attr_html: :height 400
#+caption: El mundo, la cámara y entidades más allá de los límites de la cámara
[[file:world-and-camera.svg]]

#+REVEAL: split

Al iniciar, se crea una cámara, a la que podemos acceder a través del atributo
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Scene#cameras][=cameras.main=]] de la escena:

#+begin_src js
// en el método create, donde this es una Scene
let card = this.add.sprite(200, 200, 'card');
this.cameras.main.startFollow(card);
#+end_src

#+REVEAL: split

Podemos cambiar el /viewport/ de la cámara con =setViewport=:

#+begin_src js
// this es una Scene
this.cameras.main.setViewport(200, 150, 400, 300);
#+end_src

#+REVEAL: split

Las cámaras tienen otros muchos métodos y funciones
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Cameras.Scene2D.Camera][que
se pueden consultar en su API]].



** Cambio de escenas
:PROPERTIES:
:CUSTOM_ID: cambio-de-escenas
:END:
Para cambiar entre escenas utilizamos el
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Scenes.ScenePlugin][=SceneManager=]],
accesible desde el atributo =scene=:

- Con =this.scene.start('siguiente_escena')= cambiamos de escena.
- =sleep= pone en pausa (y no renderiza) una escena
- =restart= reinicia una escena
- ...

** Pasar contenido entre escenas
:PROPERTIES:
:CUSTOM_ID: pasar-contenido-entre-escenas
:END:
Es posible (y normal) querer pasar contenido de una escena a otra
(variables "globales" del juego, estado del jugador...)

#+REVEAL: split

Para eso, podemos pasarle un objeto JavaScript a la escena que
iniciamos:

#+begin_src js
this.scene.start('siguiente_escena', { monedas: 9 })
#+end_src

#+REVEAL: split

Este objeto le llegará a la siguiente escena a través del método =init=,
al que Phaser llama automáticamente antes de los métodos =preload= y
=create=:

#+begin_src js
class SiguienteEscena extends Phaser.Scene {
  init(datos) {
    this.monedas = datos.monedas
  }

  create() {
    this.player = new Player(this, this.monedas)
  }
}
#+end_src

* Entidades [[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Sprite][=Sprite=]]
:PROPERTIES:
:CUSTOM_ID: entidades-sprite
:END:

#+REVEAL: split

La mayoría de las entidades visibles de un juego incorporan alguna
animación y comportamiento

La clase
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Sprite][=Sprite=]]
representa estas "entidades animadas" y es el componente principal de
los juegos con Phaser

#+REVEAL: split

Aunque podamos añadir /sprites/ al mundo utilizando el método factoría
=add.sprite=, el sprite por defecto es tan simple que no se suele
utilizar salvo en ocasiones donde no se requiere un comportamiento
complejo

#+begin_src js
// En el método create, this es una Scene
create() {
  let sprite = this.add.sprite(0, 0, 'phaser');
}
#+end_src

#+REVEAL: split

Este ejemplo es equivalente a añadir un /sprite/ con =add.sprite=:

#+begin_src js
// En el método create, this es una Scene
create() {
  let sprite = new Phaser.GameObjects.Sprite(this, 0, 0, 'phaser');
  this.add.existing(sprite);
}
#+end_src

#+REVEAL: split

En la mayoría de los casos los /sprites/ tendrán un comportamiento
avanzado: reaccionarán a los controles, ejecutarán algoritmos de IA,
necesitarán métodos auxiliares, etc

Por ello, en lugar de usar instancias de las clase =Sprite=, es mejor
que creemos clases adaptadas a nuestras necesidades y añadir instancias
de estas clases

#+REVEAL: split

Para ello, nuestras clases /sprite/ deben heredar de
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Sprite][=Phaser.GameObjects.Sprite=]]

#+REVEAL: split

Por ejemplo, considera el /sprite/ de un personaje que aparece
aleatoriamente y cae

#+begin_src js
class FallingMartian extends Phaser.GameObjects.Sprite {
  constructor(scene) {
    let x = Math.random() * 400;
    let y = Math.random() * 400;
    super(scene, x, y, 'phaser');
  }
}
#+end_src

#+REVEAL: split

Ahora podemos personalizar su comportamiento durante la fase de
actualización de Phaser. Por ejemplo:

#+begin_src js
class FallingMartian extends Phaser.GameObjects.Sprite {
  // en las entidades no es update, sino preUpdate()
  preUpdate () {
    this.y += 2;
  }
}
#+end_src

#+REVEAL: split

Es *muy importante*, para varias cosas, que el =preUpdate= de la clase
hija llame al =preUpdate= de la clase padre (para que
=Phaser.GameObjects.Sprite= sepa que hay que actualizarse):

#+begin_src js
class FallingMartian extends Phaser.GameObjects.Sprite {
  preUpdate (t, dt) {
    super.preUpdate(t, dt)
    // la lógica particular de `FallingMartian`, aquí
    this.y += 2 * dt / 1000; // 2 unidades por segundo
  }
}
#+end_src

#+REVEAL: split

Usando el ejemplo anterior para añadir un /sprite/, podemos añadir el
personaje que cae:

#+begin_src js
class MiEscena extends Phaser.Scene {
  create() {
    for (let i = 0; i < 10; i++) {
      let sprite = new FallingMartian(this, 0, 0);
      this.add.existing(sprite);
    }
  }
}
#+end_src



** Atributos y métodos relevantes de los sprites
:PROPERTIES:
:CUSTOM_ID: atributos-y-métodos-relevantes-de-los-sprites
:END:
Todos los =Sprite= son también =Image=. Por tanto, tienen todos los
atributos y métodos de =Image=

Más adelante veremos más atributos de los =Sprite=, como =anims= o
=body= (para físicas)

* Transformaciones
:PROPERTIES:
:CUSTOM_ID: transformaciones
:END:

#+REVEAL: split

Los objetos del juegos pueden alterar su posición, rotación y factor de
escala

#+REVEAL: split

Se llama transformación a la *alteración de los atributos que controlan
la posición, la rotación o el factor de escala de una entidad*

Recuerda que las transformaciones se ven afectadas por la posición del
pivote [[https://codepen.io/gjimenezucm/pen/zYwZpqK][como puedes ver en
este ejemplo]].



** Posicionamiento
:PROPERTIES:
:CUSTOM_ID: posicionamiento
:END:
Para alterar la posición de una entidad, recurrimos a los atributos
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Sprite][=x= e
=y=]]

#+REVEAL: split

En el caso de =Sprite=, es conveniente mover al elemento habiendo creado
una clase que herede de =Sprite= y modificar =x= e =y= dentro de su
=preUpdate=:

#+begin_src js
class Martian extends Phaser.GameObjects.Sprite {
  constructor(scene, x, y, speed) {
    super(this, x, y, 'martian');
    this.speed = speed;
    scene.add.existing(this);
  }
  preUpdate(t, dt) {
    this.x += this.speed*dt / 1000; 
    this.y += this.speed*dt / 1000;
  }
}
#+end_src



** Rotación
:PROPERTIES:
:CUSTOM_ID: rotación
:END:
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Sprite#angle][=angle=]]
controla la rotación de un =Sprite=, en grados (\([-180...180]\))

También existe
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Sprite#rotation][=rotation=]],
para hacer la rotación de radianes y es ligeramente más rápido

#+REVEAL: split

0º es derecha, 90º es abajo...

Valores negativos del ángulo son rotación antihoraria, y valores
positivos, horaria

#+REVEAL: split

Cualquier valor \(>360\) equivale a restar \(360\) al ángulo
(=angle = 450= es igual que =angle = 90=)

#+begin_src js
preUpdate (t, dt) {
    // El marciano da vueltas sin parar
    this.angle+=this.angularVelocity*dt / 1000;
};
#+end_src



** Escalado
:PROPERTIES:
:CUSTOM_ID: escalado
:END:
=width= y =height= controlan la anchura y altura, respectivamente

Con ellos se pueden escalar objetos

#+begin_src js
resizeMe () {
    this.width = 3;
    this.height = 5;
};
#+end_src

#+REVEAL: split

Podemos hacer /mirroring/, con consiste en hacer una versión especular
de la imagen, escalando de forma negativa

#+REVEAL: split

En el siguiente código, el =Sprite= se encoge tanto que se acaba dando
la vuelta

#+begin_src js
preUpdate() {
    this.width--;
};
#+end_src

#+REVEAL: split

... pero generalmente será más útil hacer mirroring con los métodos
=setFlip=

* La jerarquía con contenedores
:PROPERTIES:
:CUSTOM_ID: la-jerarquía-con-contenedores
:END:

#+REVEAL: split

La escena contiene entidades (/game objects/) pero además, en Phaser,
las entidades pueden contener otras entidades formando así una jerarquía
en forma de árbol

#+REVEAL: split

A veces queremos asociar objetos con una jerarquía, con objetos /hijo/
que dependan de objetos /padre/

#+attr_html: :height 400
#+caption: La espada y el escudo son /hijos/ del soldado
[[file:guerrero.png]]

#+REVEAL: split

Un "hijo" es otra entidad cuyas propiedades van unidas y son relativas a
las del padre

#+REVEAL: split

En Phaser 3 vamos a usar los
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Container][=Container=]],
que son =GameObjects= que pueden contener otros objetos

#+REVEAL: split

Por ejemplo, si el =Container= =A= tiene un hijo =B= y movemos =A=,
entonces =B= se moverá junto a =A= automáticamente:

#+begin_src js
// this es una `Scene`
create() {
    let a = new Phaser.GameObjects.Container(this, 10, 10); // Martian es un Sprite
    let b = new Martian('phaser');
    a.add(b); // hacemos que `b` sea hijo de `a`
    b.y = 10; // relativo a `a`
    this.add.existing(a); // lo metemos en la escena
}
#+end_src

#+REVEAL: split

La relación entre una entidad y sus entidades hijas es la de
*pertenencia al sistema de coordenadas*

#+REVEAL: split

Es decir, si la entidad =Moon= se añade a la entidad/container =Earth=,
significa que =Moon= se encuentra en el sistema de coordenadas de
=Earth=

#+REVEAL: split

Esto se puede lograr haciendo que =Earth= sea un =Container= que tenga
una =Image= o =Sprite= con su aspecto y, además, tenga otros /game
objects/ que serían sus /hijos/:

#+begin_src js
class Earth extends Phaser.GameObjects.Container {
  constructor(scene, x, y) {
    let aspecto = scene.add.sprite(0, 0, 'earth');
    super(scene, x, y, aspecto);
    scene.add.existing(this);
  }
}
#+end_src

#+REVEAL: split

Creamos también la Luna...

#+begin_src js
class Moon extends Phaser.GameObjects.Sprite {
  constructor(scene, x, y) {
    super(scene, x, y, 'moon');
  }
}
#+end_src

#+REVEAL: split

... y lo añadimos:

#+begin_src js
// this es una `Scene`
create() {
  this.earth = new Earth(this, 10, 10);
  let moon = new Moon(this, 10, 10);
  this.earth.add(this.moon);
}
#+end_src

#+REVEAL: split

Esto significa que al transformar =Earth= modificaremos =Moon=
indirectamente

#+REVEAL: split

También significa que si transformaremos =Moon=, lo haremos respecto del
sistema de coordenadas de =Earth= y no del mundo

#+REVEAL: split

Podéis ver un [[https://codepen.io/gjimenezucm/pen/jOmybNe][ejemplo en Phaser 3]] en el que las entidades se agrupan según una jerarquía
