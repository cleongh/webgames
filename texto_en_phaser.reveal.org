#+title: Texto en Phaser
#+setupfile: setup.org

* Crear texto usando fuentes del sistema
:PROPERTIES:
:CUSTOM_ID: crear-texto-usando-fuentes-del-sistema
:END:

#+REVEAL: split

Para crear texto simplemente podemos usar la clase
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.GameObjects.Text][=Phaser.GameObjects.Text=]]
con la factoría de Phaser =add.text= de =Scene=

#+REVEAL: split

Pero podemos modificar los atributos de =text= para cambiar su aspecto
como:

- =setAlign=: alineación del texto
- =setFont=: tipo de letra
- =setFontSize=: tamaño
- =setStroke=: color del borde y grosor
- =setFill=: color de relleno

#+REVEAL: split

#+begin_src js
// this es una Scene
let text = this.add.text(this.cameras.main.centerX, this.cameras.main.centerY, '- phaser text stroke -');
text.setOrigin(0.5,0.5);

// alineación del texto
text.setAlign('center');

// Font style
text.setFont('Arial Black');
text.setFontSize(50);

//Color del reborde de la letra y grosor.
text.setStroke('#000000', 6)
text.setFill('#43d637');
text.setShadow(5, 5, 'rgba(0,0,0,0.5)', 5);
#+end_src

#+REVEAL: split

** Texto en UI
:PROPERTIES:
:CUSTOM_ID: texto-en-ui
:END:
Muchas veces, el texto se utiliza como parte de la UI del juego
(puntuación, vidas...)

Pero el texto creado tal cual lo hemos hecho tiene una posición en la
escena y, por tanto, se queda fijo al mover la cámara y puede
desaparecer de la escena.

#+REVEAL: split

*Solución*: Recordad que algunos GameObject tienen un método
[[https://newdocs.phaser.io/docs/3.52.0/Phaser.GameObjects.Sprite#setScrollFactor][=SetScrollFactor=]]
que controla el movimiento de un objeto con respecto al de la cámara

#+REVEAL: split

** Botones con texto
:PROPERTIES:
:CUSTOM_ID: botones-con-texto
:END:
Se puede crear un botón fácilmente usando un texto interactivo y
añadiendo un evento de =onpointerdown=:

#+begin_src js
let button = this.add.text(...).setInteractive();
button.on('pointerdown', pointer => {
    // hacer algo
});
#+end_src

* Problema de las fuentes del sistema
:PROPERTIES:
:CUSTOM_ID: problema-de-las-fuentes-del-sistema
:END:

#+REVEAL: split

Una fuente de nuestra máquina puede no estar disponible en la máquina
del usuario.

¿Solución? Usar
[[https://www.w3schools.com/cssref/css_websafe_fonts.asp][fuentes
estándar]], crear nuestras propias fuentes de mapa de bits (bitmap
fonts) o usar fuentes Web (*webfonts*) como
[[https://fonts.google.com/][Google Fonts]]

#+REVEAL: split

#+caption: Bitmap Fonts
[[file:bitmapfont.png]]

#+REVEAL: split

** Texto con fuentes de mapa de bits
:PROPERTIES:
:CUSTOM_ID: texto-con-fuentes-de-mapa-de-bits
:END:
Para cargar una fuente de mapa de bits hay que usar
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Loader.LoaderPlugin#bitmapFont][=scene.load.bitmapFont()=]]
en el =preload=

Hay que pasarle el bitmap (en
[[https://es.wikipedia.org/wiki/Portable_Network_Graphics][PNG]], por
ejemplo) con las fuentes y el XML que las describe

#+REVEAL: split

#+begin_src js
// this es scene
preload(){
    this.load.bitmapFont(
        'bitmapFont', 'assets/fonts/bitmapFonts/bitmapFont.png',
        'assets/fonts/bitmapFonts/bitmapFont.xml');
}
create(){
    this.greeting = this.add.bitmapText(200, 100, 'bitmapFont','Bitmap Fonts!', 64);
}
#+end_src

#+REVEAL: split

Para generar el XML y el mapa de bits podemos usar:

- [[https://snowb.org/][SnowB BMF]] (online)
- [[http://www.angelcode.com/products/bmfont/][Bmfont]] (Windows)
- [[https://www.71squared.com/glyphdesigner][Glyph Designer]]

* Texto con fuentes Web
:PROPERTIES:
:CUSTOM_ID: texto-con-fuentes-web
:END:

#+REVEAL: split

Podemos cargar fuentes desde la web, por ejemplo desde
[[https://fonts.google.com/][Google Fonts]]

Hay que cargar la fuente previamente antes de usarla

#+REVEAL: split

Cargamos el código para usar webfonts:

#+begin_src js
preload() {
    this.load.script('webfont', 'https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js');
}
#+end_src

#+REVEAL: split

Después, llamamos a =WebFont.load()=:

#+begin_src js
// this es Scene
create(){
    let self = this; // Para usarlo en active
    WebFont.load({
        google: {
            families: [ 'Freckle Face', 'Finger Paint', 'Nosifer' ]
        },
        active: function () // se llama a esta función cuando está cargada
        {
            let nuevoTexto = 
                self.add.text(16, 0, 
                    'The face of the\nmoon was in\nshadow.', 
                    { fontFamily: 'Freckle Face', fontSize: 80, color: '#ffffff' })
            nuevoTexto.setShadow(2, 2, "#333333", 2, false, true);
        }
    });
}
#+end_src

#+REVEAL: split

** ¿Problemas de las Google Fonts u otras fuentes Web?
:PROPERTIES:
:CUSTOM_ID: problemas-de-las-google-fonts-u-otras-fuentes-web
:END:
Que dependemos de ellas para que el juego funcione y no tenemos control
sobre ellas

** Solución
:PROPERTIES:
:CUSTOM_ID: solución
:END:
Almacenar las fuentes de nuestro juego en el servidor y cargarlas.

Las podemos guardar en =/assets/fonts=

#+REVEAL: split

Creamos una función auxiliar y cargamos la fuente:

#+begin_src js
loadFont(name, url) {
    let newFont = new FontFace(name, `url(${url})`);
    newFont.load().then(function (loaded) {
        document.fonts.add(loaded);
    }).catch(function (error) {
        return error;
    });
}

preload() {
    // Archivo .ttf descargable desde
    // https://www.dafont.com/es/happy-donuts.font
    this.loadFont("Donuts", "/assets/fonts/HAPPY_DONUTS.ttf");
}
#+end_src

#+REVEAL: split

#+begin_src js
// this es Scene
create() {
    let nuevoTexto = 
        this.add.text(16, 0, 
            'The face of the\nmoon was in\nshadow.', 
            { fontFamily: 'Donuts', fontSize: 80, color: '#ffffff' })
}
#+end_src
