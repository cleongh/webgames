#+title: Progressive Web Apps
#+setupfile: setup.org

* Qué es una PWA
:PROPERTIES:
:CUSTOM_ID: qué-es-una-pwa
:END:

#+REVEAL: split

Son aplicaciones web (HTML, JS, CSS), pero con ciertas cosas especiales
que permiten:

- Funcionar sin conexión
- Usar notificaciones nativas
- Acceder al hardware del dispositivo
- Instalarse fácilmente
- Almacenamiento local

#+REVEAL: split

Aunque sean, técnicamente, una página web, reemplazan a las aplicaciones
nativas

Además, /el mismo código nos vale para una aplicación en escritorio,
móvil y web/



** ¿Por qué "progressive"?
:PROPERTIES:
:CUSTOM_ID: por-qué-progressive
:END:
Son "progresivas" porque se diseñan con la estrategia de "mejorado
progresivo"

#+REVEAL: split

El mejorado progresive consiste en diseñar un núcleo básico fundamental
(contenido y estructura básica), e ir añadiendo capas de funcionalidad
sobre ese núcleo

#+REVEAL: split

Por ejemplo, una PWA bien hecha funcionará sin conexión en navegadores
nuevos, y sin conexión en los viejos, pero aún así /podrá verse su
contenido/

#+REVEAL: split

Para hacer una PWA sencilla, sólo hay que hacer una página web
(aplicación), y añadir ciertas cosas

* Manifest
:PROPERTIES:
:CUSTOM_ID: manifest
:END:

#+REVEAL: split

El [[https://web.dev/add-manifest/][manifiesto]] es un archivo de texto
con datos (JSON) que describe nuestra aplicación progresiva

#+REVEAL: split

Cuando hay un archivo =manifest.json= (o como le queramos llamar)
apuntado por nuestro =index.html=, el navegador sabrá que tenemos una
PWA

#+REVEAL: split

#+begin_src json
{
  "short_name": "Nombre corto",
  "name": "Nombre largo de mi aplicación chula",
  "description": "La mejor PWA que existe",
  "icons": [ ],
  "start_url": "/",
  "background_color": "#26AF31",
  "display": "standalone",
  "scope": "/",
}
#+end_src

#+REVEAL: split

Es importante declarar el "manifest" en =index.html=:

#+begin_src html
<link rel="manifest" href="manifest.json">
#+end_src

#+REVEAL: split

Para que en el móvil se vea como una aplicación "nativa" en vez de como
una pestaña de navegador, añadimos esto a =manifest.json=:

#+begin_src json
  {  "display": "standalone"  }
#+end_src

* Service Workers
:PROPERTIES:
:CUSTOM_ID: service-workers
:END:

#+REVEAL: split

Son scripts que se ejecutan en navegador, /independientemente de una
página web/

#+REVEAL: split

No tienen acceso al DOM (porque no tienen acceso a una página)

#+REVEAL: split

Sólo funcionan con HTTPS

(Pero nos deja funcionar sin HTTPS cuando el dominio es =localhost=)

#+REVEAL: split

#+caption: Se pueden ver los Service Workers que están activos en
"Application"
[[file:ver_service_workers.png]]

#+REVEAL: split

Gracias a la tecnología de service workers, podemos /instalar/ uno desde
nuestra página web

(Para esto, obviamente, necesitamos haber accedido a nuestra página por
primera vez)

#+REVEAL: split

Cuando el service worker esté instalado, el navegador recordará que hay
uno en nuestro dominio (la raíz de la URL), y lo usará cuando volvamos a
intentar acceder a ese dominio

*Aunque estemos sin conexión*



** Instalar un service worker
:PROPERTIES:
:CUSTOM_ID: instalar-un-service-worker
:END:
Para instalar un service worker, sólo hay que ejecutar algo de código
JavaScript en nuestro =index.html=

#+REVEAL: split

#+begin_src html
<head>
<script>
    // si nuestro navegador ejecuta service workers
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('sw.js').then(reg => {
                console.log('Todo bien:', reg)
            }, function (err) {
                console.log('Fallo:', err)
            })
        })
    }
</script>
</head>
#+end_src

#+REVEAL: split

En el código anterior, nuestro service worker estará en =sw.js= (lo
veremos un poco más adelante)



** Borrar service
:PROPERTIES:
:CUSTOM_ID: borrar-service
:END:
#+caption: Podemos borrar un service worker instalado por una página con
"Unregister"
[[file:unregister_sw.png]]



** Cache de archivos
:PROPERTIES:
:CUSTOM_ID: cache-de-archivos
:END:
A través de un service worker, podemos acceder al almacenamiento de
cache del navegador

Aquí podremos almacenar archivos (=index.html=, =app.js=, =dude.png=,
=fondo.css=), que estarán disponibles para acceso, independientemente
del estado de la conexión

#+REVEAL: split

En un /almacenamiento local al navegador/, lo que quiere decir que si
vamos a otro navegador (o a otro ordenador), no estarán los archivos ahí

#+REVEAL: split

#+caption: Podemos ver qué recursos se han almacenado en la cache
[[file:recurso_almacenado_cache.png]]



** Borrar datos de la cache
:PROPERTIES:
:CUSTOM_ID: borrar-datos-de-la-cache
:END:
#+caption: Con el botón derecho sobre el ítem de cache, podemos borrarla
para forzar una recarga
[[file:borrar_cache_sw.png]]



** ¡Borrar todo!
:PROPERTIES:
:CUSTOM_ID: borrar-todo
:END:
#+caption: También podemos borrar todo lo guardado en el sitio con
=Clear site data=
[[file:clear_site_data.png]]

* Caching
:PROPERTIES:
:CUSTOM_ID: caching
:END:

#+REVEAL: split

Para tener una aplicación web que funcione sin conexión, simplemente
guardaremos los archivos en una cache

Después, tendremos un service worker que almacene los archivos, y los
recupere cuando volvamos a una URL

#+REVEAL: split

Y, cuando haya una versión nueva de los archivos (sólo lo sabremos
cuando estemos conectados) que actualice la cache

#+REVEAL: split

Para hacer el /caching/ de archivos, y luego acceder a ellos, podríamos
usar la API de service workers

Pero vamos a usar
[[https://developers.google.com/web/tools/workbox/][=workbox=]], que es
una librería que nos ahorra casi todo el trabajo con los service workers

#+REVEAL: split

Con =workbox=, es fácil activar la cache de archivos:

#+REVEAL: split

Ejemplo de archivo =sw.js=:

#+begin_src js
importScripts('https://storage.googleapis.com/workbox-cdn/releases/5.1.2/workbox-sw.js')

console.log(`Workbox ${workbox ? 'sí' : 'no'} está funcionando`)

workbox.precaching.precacheAndRoute([
  {url: '/index.html', revision: null },
  {url: '/app.js', revision: null},
])
#+end_src



** Revisiones
:PROPERTIES:
:CUSTOM_ID: revisiones
:END:
Vemos que hemos puesto ={revision: null}=

Esto quiere decir que no hay información de revisión, y que la cache no
se actualizará cuando haya modificaciones

#+REVEAL: split

En =workbox=, esta información de revisiones es necesaria para que el
navegador reconozca qué archivos han cambiado

#+REVEAL: split

Pero mantener el número de revisión a mano es un trabajo tedioso



** =workbox-cli=
:PROPERTIES:
:CUSTOM_ID: workbox-cli
:END:
=workbox= ofrece una aplicación de línea de comandos que se encargará de
gestionar el valor de =revision=

#+REVEAL: split

Instalamos node.js (versión más nueva que haya):

#+begin_src sh
# Iniciamos el proyecto node.js
npm init --yes
#+end_src

#+REVEAL: split

Instalamos =workbox-cli=:

#+begin_src sh
# en el directorio del proyecto
npm install -D workbox-cli
#+end_src

#+REVEAL: split

Iniciamos el asistente de gestión de las revisiones:

#+begin_src sh
# en el directorio del proyecto
npx workbox wizard
#+end_src

#+REVEAL: split

Con esto, dejando las opciones por defecto, nos creará un archivo
=sw.js= (podemos cambiarle el nombre)

Este archivo reemplaza al que habíamos hecho a mano (así que no hay que
hacerlo)

#+REVEAL: split

Este archivo =sw.js= tiene nuestro nuevo service worker, que gestiona el
cache y las revisiones

#+REVEAL: split

Así, cuando hagamos cambios, la revisión cambiará y el navegador
recargará el recurso

/Hay que llamar a este comando cada vez que hagamos cambios/

#+begin_src sh
# Para regenerar una versión, simplemente usamos la herramienta
# Esto asume que nuestra configuración se llama `workbox-config.js`
npx workbox generateSW
#+end_src

#+REVEAL: split

Si hacemos un cambio, pero no regeramos el SW, no se recargará en el
navegador

#+REVEAL: split

En resumen:

#+begin_src sh
# Instalar node.js (que viene con `npm`)
cd ruta_a_la_carpeta_de_mi_proyecto
npm init --yes
npm install -D workbox-cli
npx workbox wizard

# Repetir cada vez que haya cambios:
npx workbox generateSW
#+end_src

* Ciclo de trabajo
:PROPERTIES:
:CUSTOM_ID: ciclo-de-trabajo
:END:

#+REVEAL: split

Tener que ejecutar =generateSW= cada vez que hacemos algo para probar es
tedioso

#+REVEAL: split

Una solución es desarrollar nuestra /app/ como una aplicación web sin
service workers, y desplegarla cuando sea necesario

Así es mucho más rápido

#+REVEAL: split

Para eso, podemos tener:

- un =index.html= que haga referencia al service worker
- un =devel.html= que sea igual, pero que no use el service worker

#+REVEAL: split

Así, usaremos =devel.html= en desarrollo, pero desplegaremos con
=index.html=



** App shell
:PROPERTIES:
:CUSTOM_ID: app-shell
:END:
El modelo de desarrollo de "app shell" consiste en hacer caching de todo
el /núcleo/ de la aplicación (los HTML, CSS y JS que definen la
funcionalidad y la interfaz), y hacer que los datos (que podrían
cambiar) se carguen /dinámicamente/

* Almacenamiento local
:PROPERTIES:
:CUSTOM_ID: almacenamiento-local
:END:

#+REVEAL: split

Las PWA se pueden beneficiar del
[[https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage][API
de almacenamiento local]]



** Usar =localStorage=
:PROPERTIES:
:CUSTOM_ID: usar-localstorage
:END:

#+REVEAL: split

Existe una variable
[[https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage][=localStorage=]],
que es un objeto que permite guardar y leer valores

Estos valores se mantienen /entre sesiones/ (a diferencia de
[[https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage][=sessionStorage=]]),
y cada dominio tiene su propio objeto

#+REVEAL: split

Añadir o modificar una clave:

#+begin_src js
localStorage.setItem('clave', 6)
localStorage.clave = 6
#+end_src

*La clave se guarda siempre como =string=*

#+REVEAL: split

#+begin_src js
// para acceder al valor
localStorage.getItem('clave')
localStorage.clave
#+end_src

#+REVEAL: split

Borrar:

#+begin_src js
// borrar una clave
localStorage.removeItem('clave')
// borrar todo
localStorage.clear()
#+end_src

#+REVEAL: split

#+attr_html: :height 400
#+caption: Se puede ver la lista de datos guardados, por dominio
[[file:localstorage_chrome.png]]

* Auditoría con /Lighthouse/
:PROPERTIES:
:CUSTOM_ID: auditoría-con-lighthouse
:END:

#+REVEAL: split

Chrome incluye un sistema de auditoría de calidad de PWA,
[[https://developers.google.com/web/tools/lighthouse#devtools][Lighthouse]]

#+REVEAL: split

Lighthouse nos emite un informe de la página en la que estamos, dándonos
nota a cada apartado

En particular, nos evalúa si la aplicación cumple los estándares de una
PWA

#+REVEAL: split

#+attr_html: :height 400
#+caption: Para arrancar la auditoría, sólo hay que seleccionar las opciones y darle al botón
[[file:lighthouse.png]]

* Ver como en un móvil
:PROPERTIES:
:CUSTOM_ID: ver-como-en-un-móvil
:END:

#+REVEAL: split

Para probar la aplicación en un móvil, podemos ir a nuestro dispositivo
y cargar la URL (en Chrome, por ejemplo)

#+REVEAL: split

Pero Chrome tiene una manera mucho más cómoda, haciendo que podamos ver,
en el navegador, la aplicación con el aspecto de un pantalla de móvil o
tableta

#+REVEAL: split

#+attr_html: :height 400
#+caption: Podemos ver nuestra PWA como se vería en un dispositivo móvil
[[file:toggle_device_toolbar.png]]

#+REVEAL: split

#+attr_html: :height 400
#+caption: Podemos elegir las opciones del dispositivo que estamos simulando
[[file:cambiar_opciones_device.png]]
