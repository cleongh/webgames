#+title: Modelo de datos de JavaScript (I)
#+setupfile: setup.org


* Fundamentos de los lenguajes
:PROPERTIES:
:CUSTOM_ID: fundamentos-de-los-lenguajes
:END:

#+REVEAL: split

Lenguaje de programación = sintaxis + modelo de datos + modelo de
ejecución

(+ estilo)

#+REVEAL: split

- La [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference#Statements][sintaxis]] es vuestra responsabilidad
- El modelo de datos es mía
- El modelo de ejecución también
- Y la jerga es de ambos

* Experimentando con JavaScript
:PROPERTIES:
:CUSTOM_ID: experimentando-con-javascript
:END:

#+REVEAL: split

Vamos a experimentar con JavaScript así que necesitamos una forma rápida
de inspeccionar expresiones y obtener feedback de lo que estamos
haciendo

La mejor forma es utilizar la consola de /node/:

#+begin_src sh
$ node --use_strict
#+end_src

#+REVEAL: split

La opción =--use_strict= activa el modo estricto de JavaScript que
simplifica algunos aspectos del lenguaje

Recorta algunas características pero los beneficios son mayores que las
pérdidas

#+REVEAL: split

Ahora puedes probar a introducir algunas expresiones:

#+begin_src js
> 40 + 2
42
> let point = { x: 1, y: 1 };
undefined
> point
{ x: 1, y: 1 }
> point.x
1
#+end_src

#+REVEAL: split

Para limpiar la pantalla presiona =ctrl+l=

Para salir de /node/, presiona =ctrl+c= dos veces seguidas

#+REVEAL: split

Si no quieres lidiar con la consola de /node/, siempre puedes escribir
un programa y usar =console.log()= para mostrar expresiones por pantalla

#+begin_src js
// en prueba.js
console.log(40 + 2);
let point = { x: 1, y: 1 };
console.log(point);
console.log('Coordenada X:', point.x);
#+end_src

#+REVEAL: split

Y ahora ejecutar el programa con node:

#+begin_src sh
$ node prueba.js
42
{ x: 1, y: 1 }
Coordenada X: 1
#+end_src

#+REVEAL: split

El tema asume una única sesión de la consola de /node/ a menos que se
indique lo contrario

Esto es importante porque /el estado se guarda entre instrucciones/

#+REVEAL: split

Para la mayoría de los ejemplos, puedes mantener la misma sesión abierta
pero si te encuentras con algo inesperado, antes de nada prueba a
reiniciar la consola

Para reiniciar la consola tienes que *salir y volver a entrar*

Lo mejor es que se tenga la presentación abierta a un lado y la consola
/node/ en el otro

* Peculiaridades de la sintaxis
:PROPERTIES:
:CUSTOM_ID: peculiaridades-de-la-sintaxis
:END:

#+REVEAL: split

Las instrucciones acaban en =;=

...pero puedes no usarlo

#+begin_src js
return     // intérprete añade ; y devuelve undefined
a + b      // Se hace la suma pero se pierde en el limbo

return     // intérprete añade ; y devuelve undefined
{ a: 5 }   // Se crea el objeto pero se pierde en el limbo

return {
  a : 5
}          // Devuelve el objeto creado
#+end_src

#+REVEAL: split

Vamos a declarar las variables con =let= o =const=:

- =let=: Declara una variable de bloque
- =const=: Declara una variable cuyo /valor/ no puede ser cambiado

#+begin_src js
let b = 5;
b = "Hola";             // Permitido
const a = {};
a.nombre = "mi nombre"; // Permitido
a = {};                 // ERROR: No permitido
#+end_src

#+REVEAL: split

Veréis que también se pueden difinir variables con:

- =var=: Variables globales o de función. Realizan /hoisting/
- Sin ninguna palabra clave delante: variables globales

#+begin_quote
*No las usaremos en este curso (salvo que nos lo justifiquéis
adecuadamente)*

#+end_quote

Cuando veamos el modelo de ejecución, veremos por qué

** Una *letiable es un nombre*
:PROPERTIES:
:CUSTOM_ID: una-letiable-es-un-nombre
:END:
Para el programa, quitando algunas excepciones, los nombres no tienen
significado



** Un *valor no es un nombre*
:PROPERTIES:
:CUSTOM_ID: un-valor-no-es-un-nombre
:END:
De hecho, sólo las funciones pueden tener nombre para poder implementar
recursividad

#+REVEAL: split

Así que no es lo mismo el nombre =uno= que el valor =1=, y por supuesto,
no es obligatoria ninguna relación coherente entre el nombre y el valor

#+begin_src js
let uno = 2; // para el programa tiene sentido. Puede que para el programador no
#+end_src

#+REVEAL: split

En general, hablando de booleanos, cadenas y números, decimos que los
*nombres guardan valores*

Si hablamos de objetos y funciones decimos que los *nombres apuntan a
objetos o funciones* o *son referencias a objetos o funciones*

** Cadenas de caracteres (string)
:PROPERTIES:
:CUSTOM_ID: cadenas-de-caracteres-string
:END:
- Cadenas simples entre =" "= ó =' '=
- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals%3E][Cadenas
  de plantilla]] entre ` `

#+begin_src js
let s1 = 5;
let s2 = 10;
console.log(`La suma de ${s1} y ${s2} es ${s1 + s2}.`);

// La suma de 5 y 10 es 15.
#+end_src

En C# se conoce como cadenas interpoladas

* Tipos primitivos
:PROPERTIES:
:CUSTOM_ID: tipos-primitivos
:END:

#+REVEAL: split

Se llama *tipos primitivos* a aquellos que vienen con el lenguaje y que
permiten la creación de nuevos tipos más complejos


** Tipos primitivos
:PROPERTIES:
:CUSTOM_ID: tipos-primitivos-1
:END:
- booleanos
- undefined
- números
- cadenas
- enteros grandes
- símbolos


** Objetos y =null=
:PROPERTIES:
:CUSTOM_ID: objetos-y-null
:END:
Los objetos en JS son "no primitivos"

Tienen /datos/ y /métodos/

=null= es un tipo, aunque =typeof null === "object"=


** Funciones
:PROPERTIES:
:CUSTOM_ID: funciones
:END:
Las funciones se representan por su propio tipo, aunque también son
=object=

=typeof f === "function"=

Tienen la propiedad de ser "llamables" (/callable/)

#+REVEAL: split

#+begin_src js
// En los comentarios hay más valores posibles para cada uno de los tipos
let bool = true; // false
let number = 1234.5; // 42, -Infinity, +Infinity
let text = 'I want to be a pirate!'; // "I want to be a pirate"
let object = {}; // [], null
let code = function () { return 42; };
#+end_src

#+REVEAL: split

Los puedes reconocer porque responden de manera distinta al operador
=typeof=:

#+begin_src js
typeof true;
typeof 1234.5;
typeof 'I want to be a pirate!';
typeof {};
typeof function () { return 42; };
#+end_src

#+REVEAL: split

En JavaScript podemos declarar una letiable y no asignarle ningún valor.
En este caso el tipo de la letiable será =undefined=

#+begin_src js
let x;
typeof x; // undefined
x = 5;    // tan pronto como le demos un valor, el tipo dejará de ser undefined
typeof x; // number
#+end_src

* Objetos en JavaScript
:PROPERTIES:
:CUSTOM_ID: objetos-en-javascript
:END:

#+REVEAL: split

De entre todos los tipos, vamos a prestar atención a aquel cuyos valores
permiten la composición con otros. Es decir, los de tipo ='object'=

#+REVEAL: split

En JavaScript, los objetos son colecciones de valores etiquetados

Por ejemplo, si queremos representar el punto =(10, 15)= del plano XY
podemos etiquetar el valor en el eje X con la cadena ='x'= y el valor en
el eje Y con la cadena ='y'=

#+begin_src js
let point = { 'x': 10, 'y': 15 };
#+end_src

#+REVEAL: split

Cada par etiqueta y valor se llama *propiedad del objeto*

No es algo estricto, pero cuando se habla de las propiedades de un objeto se suele referir a los valores mientras que para hablar de las etiquetas se suele decir *nombre de la propiedad*

#+REVEAL: split

Si los nombres de las propiedades se escriben siguiendo las [[https://developer.mozilla.org/en-US/docs/Glossary/Identifier][reglas de formación de identificadores]] en JavaScript, las comillas no son necesarias

#+begin_src js
let point = { x: 10, y: 10 }; // mucho más conveniente
#+end_src

#+REVEAL: split

Este es el caso *más normal*, *el recomendado* y el que usaremos a los
largo del curso pero conviene saber que por detrás, *el nombre de la
propiedad es una cadena*

Para acceder a las propiedades de un objeto usamos los corchetes con el
nombre de la propiedad en medio:

#+begin_src js
point['x'];
point['y'];
#+end_src

#+REVEAL: split

De nuevo, si seguimos las reglas de formación de identificadores,
podemos usar la notación punto para acceder a la propiedad, mucho más
rápida de escribir:

#+begin_src js
point.x;
point.y;
#+end_src

#+REVEAL: split

Para cambiar el valor de una propiedad usamos el operador de asignación:

#+begin_src js
point.x = 0;
point.y = 0;
point['x'] = 0;
point['y'] = 0;
#+end_src

#+REVEAL: split

Si accedemos a una *propiedad que no existe*, obtendremos =undefined=:

#+begin_src js
let label = point.label; // será undefined. Compruébalo con typeof
#+end_src

#+REVEAL: split

También es verdad que en cualquier momento podemos crear propiedades
nuevas asignándoles un valor:

#+begin_src js
point.label = 'origin';
point;
#+end_src

#+REVEAL: split

** =null=
:PROPERTIES:
:CUSTOM_ID: null
:END:
Existe un último valor muy relacionado con los objetos: =null=

Tiene su propio tipo (=null= es de tipo =null=), pero la máquina virtual
dice que el =object=, por motivos históricos:

#+begin_src javascript
> typeof null;
'object' 
#+end_src

#+REVEAL: split

Este valor representa la *ausencia de objeto* y se suele utilizar para:

- En funciones en las que se pregunta por un objeto, indicar que no se
  ha encontrado
- En relaciones de composición, indicar que el objeto compuesto ya no
  necesita al objeto componente

#+REVEAL: split

Cuidado con:

=null == undefined=

=null === undefined=

#+REVEAL: split

Por ejemplo, en un RPG, preguntamos por el siguiente enemigo vivo para
comprobar si podemos seguir en batalla:

#+begin_src js
function getNextAliveEnemy() {
  let nextEnemy;
  if (aliveEnemies.length > 0) {
    nextEnemy = aliveEnemies[0];
  }
  else {
    nextEnemy = null;
  }
  return nextEnemy;
}
#+end_src

#+REVEAL: split

O bien, supón la ficha de personaje de un héroe:

#+begin_src js
let hero = { sword: null, shield: null };
hero.sword = { attack: 20, magic: 5 }; // coge una espada
hero.sword = null; // suelta la espada
#+end_src

* Arrays
:PROPERTIES:
:CUSTOM_ID: arrays
:END:

#+REVEAL: split

Las *listas* o *arrays* son colecciones de *datos ordenados*

También son =object=

Tienen una propiedad =length= y se accede a sus propiedades por índice
(número entero)

#+REVEAL: split

Los arrays en JavaScript no se parecen mucho a los arrays de bajo nivel
(C/C++), que son /muy eficientes/

Para representar datos de manera eficiente, usamos
[[https://developer.mozilla.org/es/docs/Web/JavaScript/Vectores_tipados][vectores
tipados]], que son objetos concretos que provee el API estándar

#+REVEAL: split

Por ejemplo, la lista de comandos de un menú:

#+begin_src js
let menu = ['Attack', 'Defense', 'Inventory'];
#+end_src

#+REVEAL: split

En este tipo de objetos, el orden importa

Para acceder a los distintos valores usamos su *índice* en la lista
entre corchetes. Los índices *comienzan en 0*

#+begin_src js
menu[0];
menu[1];
menu[2];
#+end_src

#+REVEAL: split

Se puede consultar la longitud de un array, accediendo a la propiedad
=length=

#+begin_src js
menu.length;
#+end_src

#+REVEAL: split

Como en el caso de los objetos que no son arrays, podemos cambiar
cualquier valor en cualquier momento usando el operador de asignación:

#+begin_src js
menu[0] = 'Special'; // reemplaza Wait con Special
#+end_src

#+REVEAL: split

También como en el caso de los objetos, podemos acceder a un valor que
no existe y recuperarlo o asignarlo en cualquier momento:

#+begin_src js
menu = ['Attack', 'Defense', 'Inventory'];
menu;
menu.length;
let item = menu[10];
typeof item; // será undefined
menu[10] = 'Secret';
menu;
menu.length;
#+end_src

#+REVEAL: split

Si asignamos a un índice *por encima de la longitud actual, extendemos
el array hasta ese índice*

#+REVEAL: split

Se puede añadir un elemento al final del array, llamando al método
[[https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push][=push()=]]:

#+begin_src js
menu.push('Magic');
#+end_src

#+REVEAL: split

También se puede quitar un elemento por el final usando el método
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop][=pop()=]]:

#+begin_src js
menu.pop();
#+end_src

#+REVEAL: split

Se puede alterar una lista (insertar o borrar elementos) en cualquier
lugar usando el método
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice][=splice()=]]:

#+begin_src js
// Inspecciona la lista tras cada operación
menu.splice(2, 0, 'Magic'); // añade Magic antes de Inventory
menu.splice(2, 2, 'Ench. Inventory'); // reemplaza Magic and Inventory with Ench. Inventory
menu.splice(0, 0, 'Wait'); // añade Wait al principio de la lista
#+end_src

#+REVEAL: split

Se puede recorrer con un
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of][=for...of=]]

#+begin_src js
for (let item of menu) {
  console.log(item);
}
#+end_src

#+REVEAL: split

Se pueden recorrer con un
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach][=Array.forEach=]]:

#+begin_src js
menu.forEach( 
  (item) => console.log(item)
);

menu.forEach( 
  (item, index) => console.log(`${index}: ${item}`)
);
#+end_src

Ya veremos que ==>= sirve para definir una función

#+REVEAL: split

Se puede buscar un elemento y su posición en el array con =find= y
=findIndex=

Se puede comprobar si todos los elementos cumplen una condición con
=every=

Se puede crear un nuevo array con los elementos que cumplen una
condición con =filter=

Se puede crear un nuevo array aplicando una función a cada elemento con
=map=

...
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array][y
mucho más]]

* Distinguir entre objetos y arrays
:PROPERTIES:
:CUSTOM_ID: distinguir-entre-objetos-y-arrays
:END:

#+REVEAL: split

Arrays y objetos tienen tipo =object= así que usaremos el método
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray][=Array.isArray()=]]
para distinguirlos

#+begin_src js
let obj = {}; // el objeto vacío es tan válido como cualquier otro
let arr = []; // una lista sin elementos, como te puedes imaginar
typeof obj; // será object
typeof arr; // será object
Array.isArray(obj); // será false
Array.isArray(arr); // será true
#+end_src


** Composición de objetos
:PROPERTIES:
:CUSTOM_ID: composición-de-objetos
:END:
Objetos y arrays permiten cualquier composición de objetos. Es decir,
sus valores pueden ser otros objetos y arrays, números, cadenas o
funciones

#+REVEAL: split

Ficha de personaje:

#+begin_src js
let hero = {
  name: 'Link',
  life: 100,
  weapon: { kind: 'sword', power: 20, magicPower: 5 },
  defense: { kind: 'shield', power: 5, magicPower: 0 },
  // Inventario por slots. Dos slots vacios y uno con 5 pociones
  inventory: [
    { item: null, count: 0},
    { item: null, count: 0},
    { item: { kind: 'potion', power: 15 }, count: 5}
  ]
};
#+end_src

#+REVEAL: split

Algunas propiedades:

#+begin_src js
hero.name; // el nombre del héroe
hero.weapon.kind; // el tipo de arma
hero.inventory[0]; // el primer slot del inventario
hero.inventory[0].item; // qué hay en el primer slot del inventario
hero.inventory[2].item.power; // el poder del item del tercer slot del inventario
#+end_src

* Identidad de los objetos
:PROPERTIES:
:CUSTOM_ID: identidad-de-los-objetos
:END:

#+REVEAL: split

En JavaScript, el operador de igualdad estricta o identidad es ===== (el
triple igual)

Esto permite comparar dos objetos y decidir si *son iguales*

También existe el operador de desigualdad =!=== que compara dos objetos
y decide si *no son iguales*

#+REVEAL: split

Para los tipos =bool=, =string=, =number= y =undefined=, dos valores son
iguales si tienen la *misma forma*:

#+begin_src js
// Todas estas comparaciones son verdaderas
"Hola" === "Hola";
"Hola" !== "hola";
true === true;
123 === 123.0;
123 === 122 + 1; // primero se resuelve la expresión, luego se compara
undefined === undefined;
#+end_src

#+REVEAL: split

Para =object= y =symbol=, dos objetos son iguales sólo si se refieren al
mismo objeto o símbolo:

#+begin_src js
({} !== {}); // da igual la forma, esto son dos objetos distintos
({} !== []);
[] !== []; // igual que antes
[1, 2, 3] !== [1, 2, 3]; // la forma da igual, los objetos son distintos
null === null; // pero con null funciona porque sólo hay un valor null
let obj = {};
let sameObj = obj;
let another = {};
sameObj === obj; // funciona porque ambos nombres se refieren al mismo objeto
sameObj !== another; // insisto, distintos, pese a la forma
Symbol() === Symbol(); // false
#+end_src

#+REVEAL: split

El operador ==== es el operador de igualdad abstracta o débil. Es
parecido, pero hace *peligrosas* conversiones de tipo:

#+begin_src js
3 === '3'; // false
3 == '3';  // true

"24" > "120"; // true
24 > 120;     // false
#+end_src

En general, usad siempre =====

#+REVEAL: split

[[https://developer.mozilla.org/es/docs/Web/JavaScript/Equality_comparisons_and_sameness][Comparadores
de igualdad en JS]]

#+REVEAL: split

[[https://www.destroyallsoftware.com/talks/wat][Wat]]

#+REVEAL: split

[[http://www.jsfuck.com/][JSFuck]]

#+REVEAL: split

#+begin_src js
> [10, 10, 10].map(parseInt)
[ 10, NaN, 2 ]
#+end_src

([[https://stackoverflow.com/a/14528430][Hay una explicación]])

* Funciones, referencias a funciones y llamadas a funciones
:PROPERTIES:
:CUSTOM_ID: funciones-referencias-a-funciones-y-llamadas-a-funciones
:END:

#+REVEAL: split

Hay dos formas de definir una función. Una es usando la *declaración de
función*:

#+begin_src js
// Introduce una letiable factorial que apunta a la función factorial
function factorial(number) {
  if (number === 0) {
    return 1;
  }
  return number * factorial(number - 1);
} // no necesitas un ';' en este caso
#+end_src

#+REVEAL: split

En este caso el nombre de la función (antes de los paréntesis) es
obligatorio

Esto tiene dos implicaciones:

- Permite implementar *llamadas recursivas* como la del ejemplo
- *Crea un nombre* =factorial= para referirnos a esa función

#+REVEAL: split

La otra forma es usa una *expresión de función*. Esta se parece más a
como creamos un número o una cadena:

#+begin_src js
// Introduce una letiable recursiveFunction que apunta a OTRA funcion factorial
let recursiveFunction = function factorial(number) {
  if (number === 0) {
    return 1;
  }
  return number * factorial(number - 1);
}; // ahora sí necesitas ';' como lo necesitarias con cualquier asignación
#+end_src

#+REVEAL: split

En este último caso, hay dos nombres:

- Uno es el nombre de la función =factorial= que existe para poder
  referirnos a ella dentro del cuerpo de la función
- El otro es la letiable =recursiveFunction= que referencia a la función

#+REVEAL: split

Ambos referencian a la misma función (con dos nombres diferentes) y
ambos podrían usarse para hacer la llamada recursiva

#+REVEAL: split

La misma función puede referirse desde múltiples letiables o, dicho de
otra manera, tener muchos nombres:

#+begin_src js
let a = recursiveFunction;
let b = recursiveFunction;
a === b; // es cierto, se refieren a la misma función
a.name; // el nombre de la función no tiene que ver con el de la letiable
b.name; // tres cuartos de lo mismo
recursiveFunction !== factorial; // ¡factorial no está definido!
#+end_src

#+REVEAL: split

Tampoco podemos confundir la referencia a la función =factorial= y la
llamada a la misma función =factorial(10)=

#+REVEAL: split

Con la primera forma *nos referimos al objeto* que encapsula el código
que hay que ejecutar

No requiere parámetros porque no queremos ejecutar el código sino sólo
referirnos a la función

#+REVEAL: split

Con la segunda estamos *pidiendo a la función que se ejecute* y por
tanto tenemos que aportar todos los parámetros necesarios

#+REVEAL: split

En realidad, existe una tercera forma de definir una función: la función
/anónima/:

#+begin_src js
let f = function( a ) {
  console.log(a);
};
f; 
f(5);
#+end_src

#+REVEAL: split

Se suelen usar cuando es necesario pasar una función como parámetro:

#+begin_src js
menu.forEach( 
  function (item) {
    console.log(item);
  }
);
#+end_src

#+REVEAL: split

Las
[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions][/arrow
functions/]] (==>=) son una forma más compacta para definir este tipo de
funciones:

#+begin_src js
let f = ( a ) => console.log(a);

menu.forEach( (item) => console.log(item) );
#+end_src

Tienen una propiedad muy interesante con respecto al =this= que veremos
más adelante
