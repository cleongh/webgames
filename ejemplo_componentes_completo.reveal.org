#+title: Ejemplo de componentos

* Una implementación de arquitectura de componentes en JavaScript
:PROPERTIES:
:CUSTOM_ID: una-implementación-de-arquitectura-de-componentes-en-javascript
:END:

#+REVEAL: split

Vamos a implementar un sistema /muy simple/ de entidades, componentes y
*mensajes*

Hasta ahora no hemos visto los /mensajes/, pero son una técnica muy
usada para *desacoplar* los componentes, y las entidades

* Arquitectura
:PROPERTIES:
:CUSTOM_ID: arquitectura
:END:

#+REVEAL: split

#+caption: Diagrama UML de la arquitectura
[[file:arquitectura.pu]]

** =Game= → el juego
:PROPERTIES:
:CUSTOM_ID: game-el-juego
:END:
El juego tiene:

- Una lista de =Entity=
- Una cola de =Message=
  - Los mensajes se meten en la cola
  - El juego los "reparte"

** =Entitiy= → las entidades
:PROPERTIES:
:CUSTOM_ID: entitiy-las-entidades
:END:
En una arquitectura simple de componentes, una =Entity= es poco más que
una lista de componentes

Esto significa que todo lo "interesante" estará *delegado* en los
componentes

** =Component= → los componentes
:PROPERTIES:
:CUSTOM_ID: component-los-componentes
:END:
Los componentes tienen realmente el modelo del juego

Veremos varios componentes que hacen cosas particulares

** =Message= → los mensajes
:PROPERTIES:
:CUSTOM_ID: message-los-mensajes
:END:
Los sistemas de paso de mensajes son muy flexibles, pero aumentan la
arquitectura y tienen /impacto en la eficiencia/

* Bucle principal
:PROPERTIES:
:CUSTOM_ID: bucle-principal
:END:
** ¿Qué es el bucle principal?
:PROPERTIES:
:CUSTOM_ID: qué-es-el-bucle-principal
:END:
Es un /bucle/ que se ejecuta durante todo el juego

En cada ciclo:

- Se lee la entrada
- Se actualiza el estado
- Se vuelve a pintar
- Se envían los mensajes pendientes
- Se comprueban colisiones
- ...

** Cómo es un /main loop/
:PROPERTIES:
:CUSTOM_ID: cómo-es-un-main-loop
:END:
#+begin_src js
while(juegoContinua()) {
    dt = tiempoDesdeLaIteracionAnterior() // unos pocos ms
    entrada = leerEntrada();
    estado = actualizarEstado(entrada, estadoAnterior, dt);
    pintarEstado(estado);
}
#+end_src
