#+title: Modelado orientado a objetos
#+setupfile: setup.org

* Modelado de problemas
:PROPERTIES:
:CUSTOM_ID: modelado-de-problemas
:END:

#+REVEAL: split

Programar es expresar un problema en un lenguaje de programación dado.
Modelar representa un paso intermedio en el que se capturan y organizan
los aspectos importantes de un problema

#+REVEAL: split

El modelado de un problema es independiente del lenguaje de programación
que se elija pero el lenguaje seleccionado condiciona la facilidad con
la que podemos codificar el modelo

#+REVEAL: split

Muchas actividades creativas incluyen modelos intermedios entre la
realidad y su expresión en el medio final

#+REVEAL: split

#+caption: Una página del story board de la serie de animación de Batman
[[file:batman-storyboard.jpg]]

#+REVEAL: split

Los /storyboard/ se utilizan para planificar las secuencias de acción.
Capturan los momentos clave de la secuencia

#+REVEAL: split

Este mapa muestra el paso de "Ella-Laraña", usado para mantener la
coherencia del escenario descrito

#+caption: Notas de Tolkien para la elaboración del Señor de los Anillos
[[file:lotr-notes.jpg]]

#+REVEAL: split

Un diseño de un mapa del videojuego Mario. Las herramientas digitales
han permitido la automatización de modelos en software

#+caption: Mapa del video juego Mario en papel cuadriculado
[[file:mario-level-design.png]]

#+REVEAL: split

El diagrama de flujo de cómo se llaman las distintas funciones de un
script de Unity

#+attr_html: :height 400
#+caption: Diagrama de flujo del ciclo de vida de un script en Unity
[[file:monobehaviour-flowchart.png]]

#+REVEAL: split

La programación orientada a objetos es una técnica de *modelado de
problemas* en la que se pone especial énfasis a dos conceptos: *objetos*
y *paso de mensajes*

* Programación orientada a objetos
:PROPERTIES:
:CUSTOM_ID: programación-orientada-a-objetos
:END:
** Objetos
:PROPERTIES:
:CUSTOM_ID: objetos
:END:
Los objetos son *representaciones de los aspectos de un problema*

- Desempeñan *un rol solamente*
- Exponen un conjunto de *funcionalidad concreta*: la
  [[https://en.wikipedia.org/wiki/Application_programming_interface#Libraries_and_frameworks][API]]
- *Ocultan* cómo realizan esa funcionalidad

** Paso de mensajes
:PROPERTIES:
:CUSTOM_ID: paso-de-mensajes
:END:
Los mensajes son *peticiones de acción* de un objeto a otro

- Parten de un objeto *remitente*...
- ... hacia un objeto *destinatario*
- Codifican qué *funcionalidad de la API* se precisa



** Modelado orientado a objetos
:PROPERTIES:
:CUSTOM_ID: modelado-orientado-a-objetos
:END:
La definición de objetos y las interacciones entre los mismos modelan el
problema

#+REVEAL: split

Vamos a modelar informalmente el video juego
[[https://en.wikipedia.org/wiki/Space_Invaders][Space Invaders]]

#+REVEAL: split

#+caption: Captura de pantalla del video juego space invaders donde se aprecian naves enemigas, la nave amiga, marcadores de vidas y puntuación, proyectiles amigos y enemigos y las defensas de la nave
[[file:space-invaders.jpg]]

** Identificando objetos
:PROPERTIES:
:CUSTOM_ID: identificando-objetos
:END:
Una técnica para identificar objetos es pensar en *poner nombres*

#+caption: Captura de Space Invaders donde se distinguen los objetos
[[file:space-invaders-objects.svg]]

#+REVEAL: split

Algunos objetos: nave amiga, enemigo 1, enemigo 2, enemigo 3, disparo amigo, disparo enemigo 1, disparo enemigo 2, defensa 1, defensa 2, marcador de vidas, marcador de puntuación

** Tipos de objetos e instancias
:PROPERTIES:
:CUSTOM_ID: tipos-de-objetos-e-instancias
:END:
Queda claro de un vistazo que muchos objetos concretos pertenecen a
familias o *tipos* de objetos

Conviene recordar que también se los llama *clases*

#+REVEAL: split

Los tipos de objetos *especifican propiedades y comportamientos comunes*
a todos ellos aunque individualmente sean distintos

#+REVEAL: split


#+caption: Captura de Space Invaders donde se distinguen los distintos tipos de objetos: marcadores, defensas, enemigos, protagonista y disparos
[[file:space-invaders-types.svg]]

#+REVEAL: split

Los *valores* de un tipo son cada uno de los objetos individuales

El enemigo especial, así como cada uno de los otros enemigos será un
valor distinto del *tipo enemigo*

#+REVEAL: split

Cuando utilizamos la terminología de clases, los valores se convierten
en *instancias de la clase*

En los modelos de objetos es más conveniente trabajar con tipos de
objetos

#+REVEAL: split

#+caption: Diagrama de objetos con los cinco clases identificadas:
marcador, defensa, enemigo, protagonista y disparo
[[file:space-invaders-object-diagram.svg]]

** Interfaces (API) y métodos
:PROPERTIES:
:CUSTOM_ID: interfaces-api-y-métodos
:END:
Vamos a tratar de determinar la API de nuestros tipos de objetos. Para
eso nos guiarán las interacciones propias del juego

#+begin_export html
<iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/UZlEXl9xgR 8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen>  </iframe>
#+end_export

#+REVEAL: split

Un ejemplo: /los enemigos se mueven todos juntos hacia un lado, avanzan
una línea y se mueven hacia el otro lado mientras disparan
aleatoriamente/

Vamos a *buscar verbos* esta vez: *mover*, *avanzar* y *disparar*

#+REVEAL: split

Para poder implementar el comportamiento de los enemigos, estos tienen
que poder moverse hacia los lados, avanzar y disparar

Así, tendrán que permitir que les envíen mensajes pidiendo una de estas
operaciones

#+REVEAL: split

A las cosas que puede hacer un objeto se las denomina *métodos*

#+caption: API del enemigo mostrando cuatro métodos: moverse a la
izquierda, moverse a la derecha, avanzar y disparar.
[[file:space-invaders-enemy-api.svg]]

** Estado y atributos
:PROPERTIES:
:CUSTOM_ID: estado-y-atributos
:END:
Los objetos no sólo pueden hacer cosas sino que además capturan
características de las entidades a las que representan

#+REVEAL: split

Cada enemigo, por ejemplo, tiene un *gráfico distinto*, una *puntuación
diferente*, una *posición en pantalla* y además recordará en qué
*dirección se estaba moviendo*

#+REVEAL: split

El estado no se suele exponer de forma directa en la API

Piensa en el caso de los enemigos: incluso si estos tienen una posición,
es preferible tener métodos específicos con los que manipular la
posición (como "mover a la izquierda" o "mover a la derecha") en lugar
de dar libre acceso a la posición

#+REVEAL: split

A las características de un objeto se las denomina *atributos*

#+caption: Estado del enemigo mostrando: gráfico, dirección actual, posición y puntuación.
[[file:space-invaders-enemy-state.svg]]

** El proceso de modelado es iterativo
:PROPERTIES:
:CUSTOM_ID: el-proceso-de-modelado-es-iterativo
:END:
Al definir algunas acciones, hemos introducido nuevos nombres como
*posición* o *dirección* que se convertirán en tipos de objetos con sus
propios constructores

** Constructores y creación de objetos
:PROPERTIES:
:CUSTOM_ID: constructores-y-creación-de-objetos
:END:
Pensemos en la interacción de disparo: /cuando el jugador pulsa el botón
de disparo, aparece un proyectil delante de la nave amiga que avanza
hasta alcanzar la parte superior de la pantalla o colisionar con un
enemigo/

El proyectil no estaba ahí antes y tendrá que ser creado en el momento
del disparo

#+REVEAL: split

Otro ejemplo, la preparación del nivel antes de jugar: /aparecen 55
enemigos en pantalla, 5 filas de 11 enemigos con la siguiente
configuración: 1 fila de enemigos de la especie 1, dos filas de la
especie 2, 1 de la especie 3 y 1 de la especie 4/

#+REVEAL: split

Está claro que no queremos escribir los 55 enemigos individualmente

Además, dado que todos pertenecen al tipo enemigo, queda claro que serán
todos muy parecidos

#+REVEAL: split

Lo que necesitamos es un mecanismo de *generación automática de objetos*

Cada lenguaje ofrece formas distintas de crear objetos

#+REVEAL: split

Nosotros vamos a añadir un nuevo objeto, el *contructor*, cuya tarea es
la de generar objetos de un tipo dado

Así, encontraremos *un contructor por tipo*

#+REVEAL: split

#+caption: Estado del enemigo mostrando: gráfico, dirección actual, posición y puntuación
[[file:space-invaders-constructors.svg]]

#+REVEAL: split

Los constructores tienen una API muy sencilla: *nuevo objeto*

Este método crea un nuevo objeto de un tipo dado

#+REVEAL: split

#+caption: Una factoría para un tipo cualquiera con un sólo método: nuevo objeto.
[[file:space-invaders-constructor-detail.svg]]

#+REVEAL: split

Los constructores suelen permitir personalizar partes del objeto que
están creando de forma que se le pueda decir algo como "crea un disparo
con esta posición, este gráfico y esta dirección de avance"

#+REVEAL: split

#+caption: Una factoría para un tipo cualquiera con un sólo método: nuevo objeto
[[file:space-invaders-constructor-example.svg]]

** Relaciones entre tipos
:PROPERTIES:
:CUSTOM_ID: relaciones-entre-tipos
:END:
Cuando modelamos, surgen relaciones de forma natural

Los enemigos *tienen* una posición

La nave amiga *crea* disparos

#+REVEAL: split

Nuestro cerebro tiende a establecer jerarquías entre objetos creando
tipos más generalistas

Por ejemplo: en vez de pensar en enemigos y protagonista por separado,
es posible pensar en *naves*

#+REVEAL: split

El *tipo nave* reúne los métodos y atributos comunes de la nave
protagonista y enemigos

#+REVEAL: split

#+caption: La jerarquía entre los enemigos, la nave protagonista y el super-tipo nave
[[file:space-invaders-hierarchy.svg]]

#+REVEAL: split

Esta jerarquía establece *relaciones de herencia* también llamadas
relaciones "*es un(a)*" dado que *el protagonista es una nave* y *el
enemigo es una nave*

#+REVEAL: split

Se dice que *el tipo enemigo extiende al tipo nave* añadiendo avanzar a
la API, y la puntuación y la última dirección de desplazamiento al
estado

#+REVEAL: split

La nave amiga no añade ningún método nuevo pero *redefine o
sobreescribe* el método disparar para que dispare hacia arriba

#+REVEAL: split

Como hay nuevos tipos, tendremos nuevos constructores

Los viejos constructores pueden delegar parte de la creación del objeto
(las partes comunes) a los nuevos

#+REVEAL: split

#+caption: Cuando se pide al constructor de enemigos un enemigo, este pide al constructor de naves una nave, la personaliza para que sea un enemigo y devuelve el enemigo
[[file:space-invaders-hierarchy-constructor.svg]]

#+REVEAL: split

De esta forma al pedir un enemigo, el constructor de enemigos pedirá una
nave al constructor de naves

Tomará esa nave, la modificará para que sea un enemigo y devolverá un
enemigo

#+REVEAL: split

#+begin_quote
OOP to me means only messaging, local retention and protection and
hiding of state-process, and extreme late-binding of all things

#+end_quote

[[http://userpage.fu-berlin.de/~ram/pub/pub_jf47ht81Ht/doc_kay_oop_en][Alan
Kays sobre la programación orientada a objetos]]
