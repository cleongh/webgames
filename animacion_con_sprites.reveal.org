#+title: Animación con sprites
#+setupfile: setup.org

* Qué es animar
:PROPERTIES:
:CUSTOM_ID: el-pasado
:END:

#+REVEAL: split

Animar (de /anima/) es dar /[[https://es.wikipedia.org/wiki/Alma][alma]]/, dar /movimiento/

* El siglo XIX
:PROPERTIES:
:CUSTOM_ID: el-siglo-xix
:END:

#+REVEAL: split

[[https://en.wikipedia.org/wiki/Eadweard_Muybridge][Eadweard Muybridge]]
diseñó un sistema de fotografía en el que, haciendo muchas fotos
seguidas con una cámara fija, conseguía que el ojo humano no pudiera
distinguir los fotogramas como imágenes separadas /sino como movimiento/

#+REVEAL: split

#+attr_html: :height 400
#+caption: The Horse in Motion (Wikipedia)
[[https://upload.wikimedia.org/wikipedia/commons/7/73/The_Horse_in_Motion.jpg]]

#+REVEAL: split

#+attr_html: :height 400
#+caption: The Horse in Motion animado (Wikipedia)
[[https://upload.wikimedia.org/wikipedia/commons/0/07/The_Horse_in_Motion-anim.gif]]

#+REVEAL: split

Con la misma idea, los
[[https://es.wikipedia.org/wiki/Hermanos_Lumi%C3%A8re][Hermanos
Lumière]] inventaron el cinematógrafo

* Hoy
:PROPERTIES:
:CUSTOM_ID: hoy
:END:

#+REVEAL: split

La idea prácticamente no ha variado

Para crear la *sensación* de movimiento (animación), reproducimos
imágenes en orden, suficientemente rápido

* Sprites
:PROPERTIES:
:CUSTOM_ID: sprites
:END:

#+REVEAL: split

Un
[[https://en.wikipedia.org/wiki/Sprite_(computer_graphics)][/sprite/]]
es una imagen sencilla, única, en 2D

#+REVEAL: split

Su origen es parte de la historia del videojuego

Algunas de las primeras máquinas dedicadas a ejecutar juegos tenían
hardware /dedicado/ para sprites (aunque no es exactamente el mismo
concepto que conocemos ahora)

#+REVEAL: split

Esta tecnología de sprite no realizaba cambios en RAM que se volcaban al
dispositivo gráfico

#+REVEAL: split

Esta es una de las razones por las que los sprites tenían restricciones
físicas

#+REVEAL: split

Hoy en día, generalmente, hacemos la creación de la escena gráfica
(*frame*) en la RAM y volcamos (=blit=) al contexto gráfico

Esto nos da una flexibilidad enorme, pero es /más lento/

#+REVEAL: split

Obviamente, esto en irrelevante en términos de eficiencia con el
hardware moderno

** Sprites hoy
:PROPERTIES:
:CUSTOM_ID: sprites-hoy
:END:

#+REVEAL: split

Hoy en día, los sprites son generalmente mapas de bits de cualquier
tamaño

#+REVEAL: split

En general, usamos formas rectangulares con formatos (razonablemente)
estándar

Dado cómo usamos los sprites, el tamaño o el número de colores ya no es,
generalmente, un problema

#+REVEAL: split

Solemos usar formatos con transparencia explícita

Para ello hace falta un formato que lo acepte (como PNG)

#+attr_html: :height 400
#+caption: Sprite
[[file:tux.png]]

#+REVEAL: split

También (esto depende del formato de la imagen) podemos usar un color
concreto de fondo

#+REVEAL: split

#+attr_html: :height 400
#+caption: Esta idea es muy similar a como funciona un [[https://es.wikipedia.org/wiki/Croma][croma]]
[[file:tux_fondo.png]]

#+REVEAL: split

Ya hemos cargado y usado sprites, ahora vamos a ver cómo podemos hacer
que esos sprites estén animados

* Muchos sprites
:PROPERTIES:
:CUSTOM_ID: muchos-sprites
:END:

#+REVEAL: split

Producimos la /sensación/ de animación al reproducir imágenes
consecutivas con pequeños cambios secuenciales, /suficientemente rápido/

#+REVEAL: split

Para conseguir esto en videojuegos, simplemente disponemos de varios
sprites que representan secuencias de movimientos seguidos,
*diferenciales*

#+REVEAL: split

#+attr_html: :height 400
#+caption: [[https://www.flickr.com/photos/goosemouse/4998615136][Spritesheet]]
[[https://c1.staticflickr.com/5/4147/4998615136_dc0b7b1e39_b.jpg]]

#+REVEAL: split

Una vez que tenemos la información, simplemente tenemos que usarla para
dibujar, en un contexto gráfico, los sprites por orden

/De la misma manera que el cine/

#+REVEAL: split

Para hacer esto de forma que el movimiento, la animación, sea
convincente, tenemos que asegurarnos de que el reemplazo de una imagen
por la siguiente en la secuencia no tenga "fallos"

#+REVEAL: split

Estos requisitos los cumplimos manteniendo propiedades básicas entre las
imágenes:

- Mismo tiempo por fotograma
- Mismo tamaño de fotogramas
- Mismo fondo
- Misma paleta de colores
- Misma información de transparencia
- Misma localización relativa del sprite en el recuadro
- Misma escala

#+REVEAL: split

Si mantenemos esos requisitos (lo cual no es /técnicamente/ necesario),
el programa que procese la información para representarla por pantalla
podrá ser sencillo

#+REVEAL: split

#+begin_src js
// asumimos tiempo fijo entre frames
// el tamaño y la posición del personaje: fijos
let width = 10, height = 10;
let tiempo_entre_frames = 0.01;
let frames = [frame1, frame2, frame3, ..., frame_n];
let x = 10, y = 10, frames_por_ciclo = frames.length;

while(true) { // repite la animación indefinidamente
    for(let frame_actual = 0;
            frame_actual < frames_por_ciclo;
            frame_actual++) {
        let frame_que_pinto = frames[frame_actual];
        pintar_frame(frame_que_pinto, width, height, x, y);
        esperar(tiempo_entre_frames);
    }
}
#+end_src

* Spritesheets
:PROPERTIES:
:CUSTOM_ID: spritesheets
:END:

#+REVEAL: split

Es generalmente cómodo y fácil tener todos los frames de una animación
en un solo recurso

#+REVEAL: split

Podemos usar un atlas de imagen en el que cada imagen sea un frame de la
animación

** /Frames/
:PROPERTIES:
:CUSTOM_ID: frames
:END:

#+REVEAL: split

Un frame, como hemos visto, es cada una de las imágenes que serán
representadas en una animación

#+REVEAL: split

Generalmente se representa cada frame seguido del siguiente

#+REVEAL: split

Varios frames forman un /ciclo/

** /Ciclos/
:PROPERTIES:
:CUSTOM_ID: ciclos
:END:

#+REVEAL: split

Un recurso de animación puede contener varios /ciclos/ de animación

Normalmente, una entidad en un videojuego puede hacer varias cosas, de
forma que necesitará una animación para representar cada una de ellas

#+REVEAL: split

- Andar
- Saltar
- Agacharse
- Disparar

#+REVEAL: split

Cada una de estas acciones se representa en animación con lo que
llamamos /ciclo/

Un ciclo es una secuencia ordenada de frames que representan un
movimiento continuo

#+REVEAL: split

Los ciclos pueden ser:

- Cíclicos: diseñados para que, cuando se acabe el último frame, empiece
  el siguiente (andar)
- Simples: diseñados para que se quede en un estado estacionario (morir)

** Combinando frames y ciclos
:PROPERTIES:
:CUSTOM_ID: combinando-frames-y-ciclos
:END:

#+REVEAL: split

Para combinar frames y ciclos solemos usar una disposición en rejilla

#+REVEAL: split

Así, cada fila es un ciclo, y cada columna es un frame del ciclo

#+REVEAL: split

#+attr_html: :height 400
#+caption: [[https://www.flickr.com/photos/goosemouse/4998615136][Spritesheet]]
[[https://c1.staticflickr.com/5/4147/4998615136_dc0b7b1e39_b.jpg]]

#+REVEAL: split

Es importante notar que los ciclos no tienen que tener todos los mismos
frames

Desde /el código/, o exportando datos adicionales, se carga la
información de:

- El tamaño de cada frame
- Qué ciclos hay
- Los frames de cada ciclo

#+REVEAL: split

Fijémonos en que el tamaño de frame es distinto en esta imagen: no es
cómodo, pero es posible: habría que indicarlo desde código u otro
recurso (un JSON)

#+attr_html: :height 400
#+caption: [[https://www.flickr.com/photos/goosemouse/4998615136][Frames (verde) y ciclos (rojo)]]
[[file:frameciclo.jpg]]

** Reusar ciclos
:PROPERTIES:
:CUSTOM_ID: reusar-ciclos
:END:

#+REVEAL: split

Cuando un personaje en 2D se mueve, es muy normal que pueda hacerlo en
varias direcciones

#+REVEAL: split

Así, en una vista de arriba a abajo, es de esperar que el personaje
pueda ir hacia la izquierda, derecha, arriba y abajo

#+REVEAL: split

Si tenemos un ciclo de animación en el que el personaje puede ir en una
dirección, no tenemos por qué dibujarlo yendo en la contraria, ya que
podemos aprovechar la simetría

Haciendo esto, hacemos la imagen espejada por software y la usamos como
el ciclo de animación correspondiente

** Enlazando los ciclos
:PROPERTIES:
:CUSTOM_ID: enlazando-los-ciclos
:END:

#+REVEAL: split

Cuando se crean ciclos, es de esperar que, en el videojuego, se pase de
uno a otro de manera "suave"

#+REVEAL: split

Esto quiere decir (con un ejemplo práctico) que el personaje tiene que
pasar del ciclo de /salto/ al ciclo de /andar/ de una manera fluida

#+REVEAL: split

Para hacer esto, se aplica un poco de artesanía al dibujo del sprite, y
se pueden aplicar algunas (o varias) de estas técnicas, entre otras:

#+REVEAL: split

- se dibujan los principios y finales de las ciclos de manera que sean
  "neutros" (el personaje en una postura que dé lugar a otros ciclos),

#+REVEAL: split

- o se asume un estilo de sprite animado en el que la transición se
  muestra muy bruscamente,

#+REVEAL: split

- o se hacen diferentes ciclos de transición:
  - se activa andar,
  - cuando se deja de andar, se pasa a un ciclo de "parándose", que no
    es cíclico,
  - cuando se termina el estado "parándose", se puede activar la
    animación de "quieto" de forma natural;

#+REVEAL: split

- o se anima por huesos (no lo veremos hoy) y se hace la transición de
  otra forma

* Animación en Phaser
:PROPERTIES:
:CUSTOM_ID: animación-en-phaser
:END:

#+REVEAL: split

Phaser permite animar mediante secuencias de frames y ciclos

** Cargar un spritesheet
:PROPERTIES:
:CUSTOM_ID: cargar-un-spritesheet
:END:
Con
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Loader.LoaderPlugin#spritesheet][=spritesheet=]]:

#+begin_src js
// En el preload
this.load.spritesheet('mummy',
                      'mummy.animated.png',
                      { frameWidth: 64, frameHeight: 64 });
#+end_src

#+begin_src js
// En el create
this.add.sprite(200, 360, 'mummy'); 
#+end_src


** Establecer un ciclo de animación
:PROPERTIES:
:CUSTOM_ID: establecer-un-ciclo-de-animación
:END:
Se pueden crear ciclos de animación con el
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Animations.AnimationManager][=AnimationManager=]]

#+begin_src js
// Como 'mummy' es un spritesheet, puede identificar los frames
// this es Scene
this.anims.create({
      key: 'standing_mummy',
      frames: this.anims.generateFrameNumbers('mummy', { start: 0, end: 5 }),
      frameRate: 2, // Velocidad de la animación
      repeat: -1    // Animación en bucle
    });
#+end_src


** Comenzar y detener la animación
:PROPERTIES:
:CUSTOM_ID: comenzar-y-detener-la-animación
:END:

#+REVEAL: split

Con =play()= se ejecuta una animación:

#+begin_src js
// `this` es un `Sprite` en la misma escena
// que se ha creado la animación
this.play('standing_mummy');
#+end_src

=play= puede usar un segundo parámetro para indicar si queremos que se
ignore si la animación ya estaba activada

#+REVEAL: split

Para parar una animación, con =stop()=:

#+begin_src js
// `this` es un `Sprite`en la misma escena
// que se ha creado la animación
this.stop();
#+end_src


** Eventos en animaciones
:PROPERTIES:
:CUSTOM_ID: eventos-en-animaciones
:END:

#+REVEAL: split

Es posible hacer "callbacks" para ser informados de cuándo una animación
se pone en marcha o se detiene
[[https://newdocs.phaser.io/docs/3.55.2/Phaser.Animations.Events][usando
los eventos de animación]]:

#+begin_src js
// `this` es un `Sprite`en la misma escena
// que se ha creado la animación
this.on('animationrepeat-standing_mummy', () => {
  // hacer algo
});
#+end_src


** Más cosas con animaciones por frames
:PROPERTIES:
:CUSTOM_ID: más-cosas-con-animaciones-por-frames
:END:

#+REVEAL: split

Con =chain('clave')= se pueden /encadenar animaciones/, de forma que al
terminar una empiece otra

#+REVEAL: split

Para establecer si se reinicia la reproducción de la animación, usamos
=play()=, con un booleano adicional:

#+begin_src js
sprite.play('walk', true);
sprite.play('walk', false);
#+end_src

#+REVEAL: split

Cuando animamos una clase que hereda de =Sprite=, hay que llamar al
=preUpdate(t, dt)= del padre (de =Sprite=) para que se produzca la
animación:

#+begin_src js
class Player extends Phaser.GameObjects.Sprite {
  preUpdate(t, dt) {
    super.preUpdate(t, dt)
    // ... resto de cosas
  }
}
#+end_src

* Atlas
:PROPERTIES:
:CUSTOM_ID: atlas
:END:

#+REVEAL: split

Un /atlas/ es un archivo de imagen que contiene varias texturas
diferentes

#+REVEAL: split

Una de las ventajas es que una sola textura en memoria es usada para
hacer /render/ de varios objetos, y esto mejora mucho el rendimiento

#+REVEAL: split

El problema es que son más laborioso de mantener

#+REVEAL: split

Los atlas pueden ser de imágenes del mismo tamaño, o de tamaños
diferentes

Si son de tamaños diferentes, hay que adjuntar información sobre qué
área de la textura corresponde a cada imagen

- [[https://labs.phaser.io/assets/animations/seacreatures_json.png][PNG]]
- [[https://labs.phaser.io/assets/animations/seacreatures_json.json][JSON]]

#+REVEAL: split

Para cargar un atlas en Phaser, le damos un /identificador/, un
/archivo/ con la textura, y un /JSON/ con la información de cómo está
dividida la textura.

#+begin_src js
this.load.atlas('cosas', 'cosas.png', 'cosas.json');
#+end_src

#+REVEAL: split

Y, después, podemos usar ese atlas como cualquier /spritesheet/:

#+begin_src js
this.anims.create({
  key: 'enemigo_andar', 
  frames: 
     this.anims.generateFrameNames('cosas', {prefix:'prefijo_en_json'}),
  repeat: -1 });

this.add.sprite(400, 300, 'cosas');
#+end_src

#+REVEAL: split

Hay aplicaciones web que permiten la creación de atlas para Phaser:

[[https://gammafp.github.io/atlas-packer-phaser/]]

[[https://free-tex-packer.com/app/]]

#+REVEAL: split

Es importante, al exportar el JSON, añadir el prefijo =prefijo_en_json=,
que se puede sacar del JSON generado (en =filename=, y quitando los
números):

#+begin_src js
this.anims.generateFrameNames('cosas', {prefix:'prefijo_en_json'})
#+end_src
